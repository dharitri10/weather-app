<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>SkyScope</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;600&display=swap');

    :root {
      --bg-light: linear-gradient(135deg, #fcefee, #dbeafe);
      --bg-dark: linear-gradient(135deg, #2e2e2e, #1e1e1e);
      --text-light: #0d0c0c;
      --text-dark: #f0f0f0;
    }

    body {
      font-family: 'Quicksand', sans-serif;
      text-align: center;
      padding: 60px 20px;
      margin: 0;
      background: var(--bg-light);
      background-size: cover;
      color: var(--text-light);
      transition: all 0.5s ease;
      min-height: 100vh;
    }

    body.dark {
      background: var(--bg-dark);
      color: var(--text-dark);
    }

    h1 {
      font-size: 2.5em;
      margin-bottom: 20px;
    }

    input, button {
      padding: 12px 16px;
      border: none;
      border-radius: 12px;
      font-size: 16px;
      margin: 10px 5px;
      outline: none;
      transition: all 0.2s ease;
    }

    input {
      width: 220px;
      background: #fff;
      box-shadow: 0 3px 6px rgba(0,0,0,0.1);
    }

    button {
      background-color: #6c70f3;
      color: white;
      cursor: pointer;
    }

    button:hover {
      background-color: #8185ff;
    }

    #weather {
      margin-top: 30px;
      padding: 25px;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 20px;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
      display: inline-block;
      min-width: 280px;
      animation: fadeIn 1s ease;
    }

    body.dark #weather {
      background: rgba(50, 50, 50, 0.9);
    }

    .icon {
      width: 100px;
      margin-top: 15px;
      filter: drop-shadow(2px 2px 6px rgba(0,0,0,0.1));
      animation: bounce 1.2s infinite;
    }

    .toggle-btn {
      position: absolute;
      top: 20px;
      right: 20px;
      background: transparent;
      border: none;
      font-size: 24px;
      cursor: pointer;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }
  </style>
</head>
<body>

  <button class="toggle-btn" onclick="toggleMode()">üåì</button>

  <h1>SkyScope</h1>
  <input type="text" id="cityInput" placeholder="Enter city name" />
  <button onclick="getWeather()">Get Weather</button>

  <div id="weather"></div>

  <script>
    const apiKey = "72223340aeb6a4f5d027c7d2eac1e62d"; 

    function toggleMode() {
      document.body.classList.toggle("dark");
    }

    function getEmoji(weather) {
      const emojis = {
        clear: "‚òÄÔ∏è",
        clouds: "‚òÅÔ∏è",
        rain: "üåßÔ∏è",
        snow: "‚ùÑÔ∏è",
        thunderstorm: "‚õàÔ∏è",
        drizzle: "üå¶Ô∏è",
        mist: "üå´Ô∏è",
        haze: "üå´Ô∏è"
      };
      return emojis[weather] || "üåà";
    }

    function setBackground(weather) {
      const backgrounds = {
        clear: "url('https://source.unsplash.com/1600x900/?clear,sky')",
        clouds: "url('https://source.unsplash.com/1600x900/?clouds,soft')",
        rain: "url('https://source.unsplash.com/1600x900/?rain,cloudy')",
        snow: "url('https://source.unsplash.com/1600x900/?snow,white')",
        thunderstorm: "url('https://source.unsplash.com/1600x900/?thunderstorm')",
        drizzle: "url('https://source.unsplash.com/1600x900/?drizzle,sky')",
        mist: "url('https://source.unsplash.com/1600x900/?mist,fog')"
      };
      document.body.style.backgroundImage = backgrounds[weather] || "url('https://source.unsplash.com/1600x900/?weather')";
    }

    async function getWeather() {
      const city = document.getElementById("cityInput").value.trim();
      if (!city) {
        alert("Please enter a city name");
        return;
      }

      try {
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`
        );
        const data = await response.json();

        if (data.cod === 200) {
          const weather = data.weather[0].main.toLowerCase();
          const emoji = getEmoji(weather);

          document.getElementById("weather").innerHTML = `
            <h2>${emoji} ${data.name}, ${data.sys.country}</h2>
            <p><strong>${data.main.temp} ¬∞C</strong></p>
            <p style="text-transform: capitalize;">${data.weather[0].description}</p>
            <img class="icon" src="https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png" />
          `;
          setBackground(weather);
        } else {
          document.getElementById("weather").innerHTML = `<p>${data.message}</p>`;
        }
      } catch (error) {
        console.error("Error fetching weather:", error);
        document.getElementById("weather").innerHTML = "<p>Something went wrong.</p>";
      }
    }
  </script>

</body>
</html>
